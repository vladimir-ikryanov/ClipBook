name: Build and Release

on: [push]

jobs:
  build-macos:
    # Use an older macOS runner - macos-12 has macOS Monterey + Xcode 14.x
    # macos-13 has macOS Ventura + Xcode 14.x/15.x
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Import Code Signing Certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT }}
          p12-password: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT_PASSWORD }}
          keychain-password: temp_keychain_password
      
      - name: Configure Keychain for Subprocesses
        run: |
          # The apple-actions creates signing_temp.keychain, we need to ensure it's unlocked and in search path
          KEYCHAIN_PATH=~/Library/Keychains/signing_temp.keychain-db
          
          # Unlock the keychain (it might lock between steps)
          security unlock-keychain -p temp_keychain_password "$KEYCHAIN_PATH"
          
          # Make it the default keychain (this ensures subprocesses use it)
          security default-keychain -s "$KEYCHAIN_PATH"
          
          # Create a codesign wrapper in PATH that will be found before /usr/bin/codesign
          mkdir -p ~/bin
          cat > ~/bin/codesign << 'EOF'
          #!/bin/bash
          # Wrapper script to ensure codesign uses the correct keychain
          KEYCHAIN_PATH="$HOME/Library/Keychains/signing_temp.keychain-db"
          security unlock-keychain -p temp_keychain_password "$KEYCHAIN_PATH" 2>/dev/null || true
          exec /usr/bin/codesign --keychain "$KEYCHAIN_PATH" "$@"
          EOF
          
          chmod +x ~/bin/codesign
          
          # Add ~/bin to PATH at the beginning so our wrapper is found first
          echo "$HOME/bin" >> $GITHUB_PATH
          export PATH="$HOME/bin:$PATH"
          
          # Verify the setup
          echo "Default keychain:"
          security default-keychain
          echo ""
          echo "Keychain list:"
          security list-keychains -d user
          echo ""
          echo "Available identities in keychain:"
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"
          echo ""
          echo "Codesign wrapper installed at:"
          which codesign
          echo ""
          echo "Testing codesign wrapper:"
          codesign --version
      
      - name: Restore licensing files
        run: |
          mkdir -p src-cpp/src/licensing
          echo "${{ secrets.LICENSING_H }}" | base64 -d > src-cpp/src/licensing/licensing.h
          echo "${{ secrets.LICENSING_MM }}" | base64 -d > src-cpp/src/licensing/licensing.mm

      - name: Build ClipBook for arm64
        run: |
          # Verify certificate is available before build
          echo "Verifying certificate before build:"
          security find-identity -v -p codesigning
          
          # Run the build
          npm run mobrowser build -- --arm64 --verbose
        env:
          MOBROWSER_KEY: ${{ vars.MOBROWSER_KEY }}
          CLIPBOOK_TEAM_ID: ${{ vars.CLIPBOOK_TEAM_ID }}
          CLIPBOOK_APPLE_ID: ${{ vars.CLIPBOOK_APPLE_ID }}
          CLIPBOOK_PASSWORD: ${{ vars.CLIPBOOK_PASSWORD }}
          CLIPBOOK_CODESIGN_IDENTITY: ${{ vars.CLIPBOOK_CODESIGN_IDENTITY }}
      
      # - name: Upload DMG as artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ClipBook-macOS
      #     path: |
      #       build-dist/pack/*.dmg
      #       dist/*.dmg
      #     retention-days: 30
      
      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: |
      #       build-dist/pack/*.dmg
      #       dist/*.dmg
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}