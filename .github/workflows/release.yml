name: Build and Release

on: [push]

jobs:
  build-macos:
    # Use an older macOS runner - macos-12 has macOS Monterey + Xcode 14.x
    # macos-13 has macOS Ventura + Xcode 14.x/15.x
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Import Code Signing Certificate
        run: |
          # Use the default login keychain instead of creating a new one
          # This ensures codesign can find the certificate in subprocesses
          KEYCHAIN_PATH=~/Library/Keychains/login.keychain-db
          
          # Decode and import certificate to login keychain
          echo "${{ secrets.DEVELOPER_ID_APPLICATION_CERT }}" | base64 -d > certificate.p12
          security import certificate.p12 -k "$KEYCHAIN_PATH" -P "${{ secrets.DEVELOPER_ID_APPLICATION_CERT_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/productbuild
          rm certificate.p12
          
          # Set key partition list to allow codesign to use the certificate without prompting
          # The partition list must be set to allow access without user interaction
          security set-key-partition-list -S apple-tool:,apple:,codesign: -k "" "$KEYCHAIN_PATH"
          
          # Unlock the login keychain (it should already be unlocked, but make sure)
          security unlock-keychain "$KEYCHAIN_PATH" || true
          
          # Verify certificate is available
          echo "Certificates in login keychain:"
          security find-identity -v -p codesigning
          echo ""
          echo "Default keychain:"
          security default-keychain
          echo ""
          echo "Keychain search list:"
          security list-keychains -d user
      
      - name: Restore licensing files
        run: |
          mkdir -p src-cpp/src/licensing
          echo "${{ secrets.LICENSING_H }}" | base64 -d > src-cpp/src/licensing/licensing.h
          echo "${{ secrets.LICENSING_MM }}" | base64 -d > src-cpp/src/licensing/licensing.mm

      - name: Build ClipBook for arm64
        run: |
          # Verify certificate is available before build
          echo "Verifying certificate before build:"
          security find-identity -v -p codesigning
          
          # Run the build
          npm run mobrowser build -- --arm64 --verbose
        env:
          MOBROWSER_KEY: ${{ vars.MOBROWSER_KEY }}
          CLIPBOOK_TEAM_ID: ${{ vars.CLIPBOOK_TEAM_ID }}
          CLIPBOOK_APPLE_ID: ${{ vars.CLIPBOOK_APPLE_ID }}
          CLIPBOOK_PASSWORD: ${{ vars.CLIPBOOK_PASSWORD }}
          CLIPBOOK_CODESIGN_IDENTITY: ${{ vars.CLIPBOOK_CODESIGN_IDENTITY }}
      
      - name: Cleanup Certificate
        if: always()
        run: |
          # Remove the imported certificate from the login keychain
          # Find and delete the certificate by its common name
          security delete-identity -c "Developer ID Application: Vladimir Ikryanov (96B3X7S47C)" ~/Library/Keychains/login.keychain-db || true
          echo "Certificate cleanup completed"
      
      # - name: Upload DMG as artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ClipBook-macOS
      #     path: |
      #       build-dist/pack/*.dmg
      #       dist/*.dmg
      #     retention-days: 30
      
      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: |
      #       build-dist/pack/*.dmg
      #       dist/*.dmg
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}