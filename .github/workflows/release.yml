name: Build and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    # Use an older macOS runner for better compatibility with older macOS versions
    # macos-12 has macOS Monterey + Xcode 14.x (SDK 12.x)
    # macos-13 has macOS Ventura + Xcode 14.x/15.x (SDK 13.x)
    # macos-14 has macOS Sonoma + Xcode 15.x (SDK 14.x)
    # Using macos-13 to avoid C++ standard library ABI compatibility issues with macOS 14.x systems
    runs-on: macos-14
    
    env:
      MOBROWSER_KEY: ${{ vars.MOBROWSER_KEY }}
      CLIPBOOK_TEAM_ID: ${{ vars.CLIPBOOK_TEAM_ID }}
      CLIPBOOK_APPLE_ID: ${{ vars.CLIPBOOK_APPLE_ID }}
      CLIPBOOK_PASSWORD: ${{ vars.CLIPBOOK_PASSWORD }}
      CLIPBOOK_CODESIGN_IDENTITY: ${{ vars.CLIPBOOK_CODESIGN_IDENTITY }}
      BUILD_CERT_BASE64: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT }}
      P12_PASSWORD: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Restore licensing files
        run: |
          mkdir -p src-cpp/src/licensing
          echo "${{ secrets.LICENSING_H }}" | base64 -d > src-cpp/src/licensing/licensing.h
          echo "${{ secrets.LICENSING_MM }}" | base64 -d > src-cpp/src/licensing/licensing.mm

      - name: Set up keychain
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Decode and create keychain
          echo -n "$BUILD_CERT_BASE64" | base64 --decode -o "$CERTIFICATE_PATH"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import Apple root certs (must be done BEFORE importing the certificate)
          curl -O https://www.apple.com/certificateauthority/AppleRootCA-G3.cer
          curl -O https://www.apple.com/certificateauthority/AppleWWDRCAG6.cer
          curl -O https://www.apple.com/certificateauthority/DeveloperIDG2CA.cer

          security import AppleRootCA-G3.cer -k "$KEYCHAIN_PATH" -T /usr/bin/codesign -T /usr/bin/productsign
          security import AppleWWDRCAG6.cer -k "$KEYCHAIN_PATH" -T /usr/bin/codesign -T /usr/bin/productsign
          security import DeveloperIDG2CA.cer -k "$KEYCHAIN_PATH" -T /usr/bin/codesign -T /usr/bin/productsign

          # Import Developer ID certificate with private key
          # Using -T flags to explicitly allow codesign and productsign access
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -k "$KEYCHAIN_PATH" -T /usr/bin/codesign
          
          # Set partition list to allow access without password prompts
          # This MUST be done immediately after import for it to work properly
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # ðŸ”‘ Ensure this keychain is used by all subprocesses
          # Add both our custom keychain AND the login keychain to the search list
          # This ensures system processes can find certificates in both locations
          security list-keychains -d user -s "$KEYCHAIN_PATH" login.keychain
          security default-keychain -s "$KEYCHAIN_PATH"
          
          # Keep the keychain unlocked for the entire build process
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

      - name: Set date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Build ClipBook (ARM64)
        run: |
          # Run the build
          npm run mobrowser build -- --arm64 --verbose
      
      - name: Upload DMG (ARM64)
        uses: actions/upload-artifact@v4
        with:
          name: clipbook-arm64-${{ steps.date.outputs.date }}
          path: |
            build-dist/pack/*.dmg
            build-dist/pack/*.xml
          retention-days: 15

      - name: Build ClipBook (x64)
        run: |
          # Run the build
          npm run mobrowser build -- --x64 --verbose
      
      - name: Upload DMG (x64)
        uses: actions/upload-artifact@v4
        with:
          name: clipbook-x64-${{ steps.date.outputs.date }}
          path: |
            build-dist/pack/*.dmg
            build-dist/pack/*.xml
          retention-days: 15
