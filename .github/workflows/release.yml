name: Build and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos:
    # Use an older macOS runner - macos-12 has macOS Monterey + Xcode 14.x
    # macos-13 has macOS Ventura + Xcode 14.x/15.x
    runs-on: macos-latest
    
    env:
      MOBROWSER_KEY: ${{ vars.MOBROWSER_KEY }}
      CLIPBOOK_TEAM_ID: ${{ vars.CLIPBOOK_TEAM_ID }}
      CLIPBOOK_APPLE_ID: ${{ vars.CLIPBOOK_APPLE_ID }}
      CLIPBOOK_PASSWORD: ${{ vars.CLIPBOOK_PASSWORD }}
      CLIPBOOK_CODESIGN_IDENTITY: ${{ vars.CLIPBOOK_CODESIGN_IDENTITY }}
      BUILD_CERT_BASE64: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT }}
      P12_PASSWORD: ${{ secrets.DEVELOPER_ID_APPLICATION_CERT_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Restore licensing files
        run: |
          mkdir -p src-cpp/src/licensing
          echo "${{ secrets.LICENSING_H }}" | base64 -d > src-cpp/src/licensing/licensing.h
          echo "${{ secrets.LICENSING_MM }}" | base64 -d > src-cpp/src/licensing/licensing.mm

      - name: Set up keychain
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Decode and create keychain
          echo -n "$BUILD_CERT_BASE64" | base64 --decode -o "$CERTIFICATE_PATH"
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import Apple root certs
          curl -O https://www.apple.com/certificateauthority/AppleRootCA-G3.cer
          curl -O https://www.apple.com/certificateauthority/AppleWWDRCAG6.cer
          curl -O https://www.apple.com/certificateauthority/DeveloperIDG2CA.cer
          security import AppleRootCA-G3.cer -k "$KEYCHAIN_PATH" -A
          security import AppleWWDRCAG6.cer -k "$KEYCHAIN_PATH" -A
          security import DeveloperIDG2CA.cer -k "$KEYCHAIN_PATH" -A

          # Import Developer ID certificate
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security set-key-partition-list -S apple-tool:,apple:,codesign: -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # ðŸ”‘ Ensure this keychain is used by all subprocesses
          security list-keychains -d user -s "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"

          # Optionally verify identity exists
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

          # Init the environment variable with the keychain path
          echo "export CLIPBOOK_CODESIGN_KEYCHAIN=$KEYCHAIN_PATH" >> $GITHUB_ENV

          # Print the environment variable
          echo "CLIPBOOK_CODESIGN_KEYCHAIN=$CLIPBOOK_CODESIGN_KEYCHAIN"

      - name: Build ClipBook for arm64
        run: |
          # Re-list keychain in subprocess just in case
          security list-keychains -d user -s "$RUNNER_TEMP/app-signing.keychain-db"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$RUNNER_TEMP/app-signing.keychain-db"

          # Print the environment variable
          echo "CLIPBOOK_CODESIGN_KEYCHAIN=$CLIPBOOK_CODESIGN_KEYCHAIN"

          # Run the build
          npm run mobrowser build -- --arm64 --verbose
      
      # - name: Upload DMG as artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ClipBook-macOS
      #     path: |
      #       build-dist/pack/*.dmg
      #       dist/*.dmg
      #     retention-days: 30
      
      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: |
      #       build-dist/pack/*.dmg
      #       dist/*.dmg
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}